Chapter12 표준태그라이브러리(JSTL)
- 커스텀 태그 중 많이 사용되는 것들을 모라서 JSTL(JSP Standard Tag Library)라는 표준을 만듦
- 스크립트릿 코드의 사용을 줄이면서 더욱 간결하고 이해하기 쉬우ㅠㄴ JSP코드를 작성할 수 있음

1. JSTL이란
- HTML 태그와 비슷한 태그를 사용해서 반복문이나 조건문을 처리
- JSP 페이지에서 많이 사용되는 논리적인 판단, 반복 처리, 포맷 처리를 위한 커스텀  태그를 표준으로 만들어 정의

- JSTL이 제공하는 태그의 종류
 * 코어 : 변수지원, 흐름제어, URL 처리 : c : http://java.sun.com/jsp/jstl/core
 * XML : XML 코어, 흐름제어, XML 변환 : x :  http://java.sun.com/jsp/jstl/xml
 * 국제화 : 지역, 메세지 형식, 숫자 및 날짜 형식 : fmt :  http://java.sun.com/jsp/jstl/fmt
 * 데이터 베이스 : SQL :   http://java.sun.com/jsp/jstl/sql
 * 함수 : 컬렉션처리, String 처리 : fn :  http://java.sun.com/jsp/jstl/function


2. 코어 태그
- 변수 설정이나 if-else와 같은 노리 처리에 사용되는 스크립트 코드를 대체하는 태그를 제공
- <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
- 변수지원
 * set : JSP에서 사용할 변수를 설정
 * remove : 설정한 변수를 제거
- 흐름제어 
 * if : 조건에 따라 내부 코드를 수정
 * choose : 다중 조건을 처리할 떄 사용
 * forEach : 컬렉션이나 Map의 각 항목을 처리할 때 사용
 * forTokens : 구분자로 분리된 각각의 토큰을 처리할 떄 사용
- URL 처리
 * import : URL을 사용하여 다른 자원의 결과를 삽입
 * redirect : 지정한 경로로 리다이렉트
 * url : URL을 재작성
- 기타 태그
 * catch : 익셉션을 처리할 떄 사용
 * out : JspWrite에 내용을 출력

- 변수 지원 태그
 * <c:set> 태그
	# EL의 변수의 값이나 EL변수의 프로퍼티 값을 지정할 떄 사용
	# <c:set var="변수명" value="값" scope="영역" />
	   <c:set var="변수명" scope=" 영역" > 값 </ c:set>
	# var : 값을 저장한 EL 변수의 이름을 지정
	   value : 변수의 값을 지정. 표현식, EL, 정적인 텍스트를 사용해서 값을 지정할 수 있음
	   scope : 변수를 저장할 영역을 지정. 값은 page, request, session, application. 디폴트는 page
	# <c:set> 태그는 scope 속성에서 지정한 영역에 값을 저장
	
	# <c:set target="대상" property="프로퍼티이름" value"값" />
	   <c:set target="대상" value"프로퍼티이름" /> 값 </ c:set>
	# target : 프로퍼티 값을 설정할 대산 객체를 지정(그 객체에게 set). EL변수나 표현식을 사용할 수 있음
		대상 객체는 자바빈 객체나 Map이어야 함
	# property : 설정한 프로퍼티의 이름을 지정. target이 자바빈 객체인 경우 프로퍼티 이름에 해당하는 set메소드르 제공
	# value : 프로퍼티의 값을 지정
	# target 속성을 설정할 때 주의할 점은 프로퍼티 값을 설정할 EL 변수의 이름만 지정하는 실수를 하기 쉽다는 것.
	# target 대상이 EL 변수인 경우 target 속성의 값을 ${member}와 같이 EL을 이용해 설정해야함.
	# 속성 : 표현식/EL : 타입 : 설명
	  var : 사용불가 : String : EL 변수이름
 	  value : 사용 가능 : Object : 변수에 할당할 값
	  scope : 사용 불가 : String : 변수를 생성할 영역, 기본값은 page
	  target : 사용 가능 : Object : 프로퍼티 값을 설정할 객체 지정
	  property : 사용 가능 : String : 프로퍼티 이름
 * <c:remove> 태그
	# set 태그로 지정한 변수를 삭제할 떄 사용
	# <c:remove var="varName" scope="영역" />
	# 삭제할 변수의 scope를 지정하지 않으면 동일한 이름으로 지정된 모든 영역의 변수를 삭제한다는 점
	# 속성 : 표현식/EL : 타입 : 설명
	  var : 사용 불가 : String : 삭제할 EL 변수 이름
	  scope : 사용 불가 : String : 삭제할 변수가 포함된 영역
- 흐름 제어 태그 (조건문)
 * <c:if> 태그
	# else가 없어서 참인 경우만 물어봐야함. 
	# <c:if test="조건">  //test는 불린 사용. true면 태그의 몸체 내용을 처리
	   	.........
	   </c:if>
 	# 속성 : 표현식/EL : 타입 : 설명
	   test : 사용 가능 : boolean : 검사 조건
	   var : 사용 불가 : String : 검사 조건의 계산 결과값을 저장할 EL 변수
	   scope : 사용 불가 : String : 삭제할 변수가 포함된 영역
 * <c:choose>, <c:when>, <c:otherwise> 태그
	# <c:choose>
		<c:when test="">
		</c:when>
		<c:when test="">
		</c:when>
		<c:otherwise>
		</c:otherwise>
	   </c:choose>
	# <c:choose>는 다수의 <c:when> 태그를 중첩해서 사용
	# <c:when>는 test 속성의 값이 true일 때 내부 블록을 수행
	# 모든 <c:when> 태그의 test 값이 false이면 <c:otherwise>이 실행됨
	# <c:otherwise> 태그는 필수는 아니며 필요한 경우에만 추가
 * <c:forEach> 태그 (반복태그)
	# forEach 태그는 배열, Collection 또는 Map에 저장되어 있는 값들을 순차적으로 처리할 떄 사용
		<c:forEach var="변수" items="아이템">
			...........
		</c:forEach>
	# items 속성에는 Map, Array, Collection이 올 수 있음
	# 배열의 경우 객체의 배열 뿐만아니라 기본 데이터 타입의 배열에 대해서도 알맞게 처리 가능
	   기본 데이터 타입은 Integer나 Double과 같은 래퍼 클래스를 사용해서 처리 가능
	# for 구문과 같은 효과
		ex) <c:forEach var="i" begin="1" end="10">
			${i}
		     </c:forEach>
	# step 속성을 사용하면 증가분을 변경할 수 있음
		ex) <c:forEach var="i" begin="1" end="10" step="2">
			${i}
		     </c:forEach>
			=> 1,3,5,7,8의 값을 차례대로 갖음


	# List, Iterator, Enumeration, Map에서도 begin속성과 end 속성을 사용해서 읽어 올 항목의 개수를 제한 할 수 있음
	# 하지만 Iterator, Enumeration, Map의 경우에는 삽입한 순서와 읽어오는 순서가 일치하지않을 수도 있기 때문에 begin속성과 end 속성을 사용하기에 적합하지 않음

	# items 속성값으로 List와 같은 컬렉션이나 배열을 전달한 경우, forEach태그의 몸체에서 현재 사용하는 항목의 인덱스 값을 사용해야할 때가 있음
	  이때 varStatus 속성을 사용해서 인덱스 값을 사용할 수 있음. 
	# vatStatus 속성은 루프 정보를 담는 객체를 저장할 변수명을 값으로 갖음
	# vatStatus 속성에서 명시한 변수가 제공하는 프로퍼티
		@ index : 루프 실행에서 현재 실행 횟수
		@ count : 루프 실행 횟수
		@ begin : begin 속성값
		@ end : end 속성값
		@ step : step 속성값
		@ first : 현재 실행이 루프의 첫 번째 실행인 경우 true
		@ last : 현재 실행이 루프의 마지막 실행인 경우 true
		@ current : 컬렉션 중 현재 루프를 사용할 객체


	# 속성 : 표현식/EL : 타입 : 설명
	  var : 사용 불가 : String : 몸체에서 사용할 EL변수 이름
	  items : 사용 가능 : Collection, Iterator, Enumeration, Map, 배열 : 반복 처리할 데이터
	  varStatus : 사용 불가 : String : 루프 상태를 저장할 EL 변수 이름
	  begin : 사용 가능 : int : 시작 인덱스 값
	  end : 사용 가능 : int : 끝 인덱스 값
	  step : 사용 가능 : int : 인덱스 증분 값
 * <c:forTokens> 태그 (반복문)
	# <c:forTokens var="token" items="문자열" delims="구분자(. , / - 등 이것을 만나면 끊어)">
		${token}
	  </c:forTokens>

	# <c:forTokens> 태그의 items 속성 값이 String이라는 것을 제외하면 <c:forToken>과 동일

- URL 처리 태그
 * URL 생성 : <c:url>
	# URL이 생성되어야 redirect와 import 가능
	# <c:url value="URL" var="varName" scope="영역">
		<c:param name="이름" value="값" />
	  </c:url>
	# var 속성과 scope 속성은 생략 가능
	# var 속성을 지정하지 않으면 현재 위치에 생성한 URL을 출력
	# <c:param> 태그를 이용해서 파라미터를 URL에 추가할 수 있음
	# <c:param> 태그로 파라미터를 지정하면 파라미터 이름과 값의 URL 인코딩 처리는 contentType에 명시된 캐릭터 셋을 이용해서 처리
	# 절대 URL : 완전한 URL
	  상대 URL : 웹어플리케이션에서의 경우 /로 시작
		     현재 JSP에 대한 상대 경로 : .으로 시작
	# 속성 : 표현식/EL : 타입 : 설명
	  value : 사용 가능 : String : 읽어 올 URL
	  var : 사용 불가 : String : 읽어온 결과를 저장할 변수 이름
	  scope : 사용 불가 : String : 변수를 저장할 영역
 * 리다이렉트 처리 : <c:redirect>
	# response.sedRedirect()처럼 지정한 페이지로 리다이렉트 시켜주는 기능
	# <c:redirect url="URL" context="컨텍스트 경로"> //컨텍스트 경로는 절대 경로 
		<c:param name="이름" value="값" />
	  </c:redirect>
	# redirect 코드를 실행하면 그 이후의 코드는 실행되지 않음
	# 속성 : 표현식/EL : 타입 : 설명
	  url : 사용 가능 : String : 리다이렉트 할 URL
	  context : 사용 가능 : String : 컨텍스트 경로
 * import : <c:import>

- 기타 코어 태그
 * <c:out> 태그
	# JspWriter에 데이터를 출력할 때 사용되는 태그
	# <c:out value="value" escapeXml="(true|false)" default="기본값" />
	  <c:out value="value" escapeXml="(true|false)">기본값 </c:out>
	# value : JspWriter에 출력할 값. 일반적으로 String와 같은 문자열
	# escapeXml : true일 경우 태그 처리를 하지 않고 변환되어 표현됨. 기본값은 true. jQuery의 text와 비슷
	# default : value 속성에서 지정한 값이 존재하지 않을 때 사용될 값을 지정.
	# 속성 : 표현식/EL : 타입 : 설명
	  value : 사용 가능 : Object : 출력할 값
	  escapeXml : 사용 가능 : boolean : 특수 문자를 변환할 지의 여부
	  default : 사용 가능 : Object : value의 결과 값이 null인 경우 출력할 값
 * <c:catch> 태그
	# 발생된 익셉션을 EL 변수에 저장할 떄 사용되는 태그
	# <c:catch var="exName">
		...익셉션이 발생할 코드
	  </c:catch>
		...
	  ${exName}
	# <c:catch> 태그 블록에 익셉션이 발생할 경우 그 익셉션 객체를 exName 변수에 할당


3. 국제화 태그
- 특정 지역에 따라 알맞은 메세지를 출력해야 할 때 사용
- 국제화 태그 라이브러리
 * 로케일 지정
	# setLocale : 국제화 태그들이 사용할 Locale을 지정
			<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
			<fmt:setLocale value="ko" scope="request" /> 
				//value의 기본 값은 web.xml에 지정한 값
				//scope의 기본 값은 page
	# requestEncodeing : 요청 파라미터의 캐릭터 인코딩을 지정
				<fmt:requestEncoding("utf-8") />
 * (번들)메세지 처리 (언어권에 따라서 알맞은 메세지를 출력)
	# bundle : 태그 몸체에서 사용할 리소스 번들을 지정.(정해진 위치에 셋팅)
	# message : 지역에 알맞은 메세지를 출력
		ex) <fmt:bundle basename="resource.message">
				.......
			<fmt:message key="GREETING" />
		    </fmt:bundle>
		@ 속성 : 표현식/EL : 타입 : 설명
		  basename : 사용 가능 : String : 사용할 리소스 번들의 이름
		  prefix : 사용 가능 : String : bundle 태그의 내부에서 사용되는 message 태그의 key 속성의 값 앞에 자동으로 붙게될 문자열
	# setBundle : 리소스 번들을 읽어와 특정 변수에 저장 (전체 page에 특정 메세지 번들을 사용할 수 있도록 로딩)
 * 숫자 및 날짜 포매팅 
	# formatNumber : 숫자를 포매팅
	# formatDate : 지역에 알맞은 메세지를 출력
	# parseDate : 문자열로 표시된 날짜를 분석해서 Data 객체로 바꿈
	# parseNumber : 문자열로 표시된 날짜를 분석해서 숫자로 변환
	# setTimeZone : 시간대 정보를 특정 변수에 저장
	# timeZone : 시간대를 지정


